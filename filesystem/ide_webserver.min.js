function streamFile(e,t){for(var r=FS.openSync(e,"r"),a=new Buffer(128);;){var s=FS.readSync(r,a,0,a.length,null)
if(log("Size read: "+s),s<=0)break
t.write(a.toString("utf8",0,s))}return FS.closeSync(r),0}function saveFile(e,t){var r=FS.openSync(e,"w")
FS.writeSync(r,t),FS.closeSync(r)}function requestHandler(request,response){log("IDE_WebServer: We have received a new HTTP client request!"),DUKF.logHeap("requestHandler")
var postData=""
request.on("data",function(e){log("HTTP Request on(data) passed: "+e),postData+=e}),request.on("end",function(){function sendFile(e){try{fileName=DUKF.FILE_SYSTEM_ROOT+e,response.writeHead(200),streamFile(fileName,response)}catch(e){log("We got an exception: "+e),response.writeHead(404)}}var fileName
log("HTTP Request on(end):"),log(" - method: "+request.method),log(" - path: "+request.path),log(" - headers: "+JSON.stringify(request.headers)),DUKF.logHeap("ide_webserver: request.on(end)")
var pathParts=request.path.split("/")
if(pathParts.length<2)return void response.end()
if(pathParts=pathParts.splice(1),"run"==pathParts[0]&&"POST"==request.method){log("We are about to run: "+postData)
try{eval(postData)}catch(e){log(e.stack)}response.writeHead(200)}else if("run"==pathParts[0]&&"GET"==request.method)pathParts.length>1&&(fileName="/"+pathParts.splice(1).join("/"),DUKF.runFile(fileName)),response.writeHead(200)
else if("files"==pathParts[0])if(response.writeHead(200),1==pathParts.length&&"GET"==request.method){var filesArray=FS.spiffsDir()
response.write(JSON.stringify(filesArray))}else fileName="/"+pathParts.splice(1).join("/"),"GET"==request.method?(log("Load the file called "+fileName),streamFile(DUKF.FILE_SYSTEM_ROOT+fileName,response)):"POST"==request.method&&(log("Writing to file "+fileName),log("Data: "+postData),saveFile(DUKF.FILE_SYSTEM_ROOT+fileName,postData))
else sendFile(request.path)
postData=null,response.end()})}function startIde(){var e=8e3,t=8002,r=http.createServer(requestHandler)
r.listen(e),log("IDE_WebServer listening on port "+e),DUKF.logHeap("#C")
var a=ws.Server()
a.on("connection",function(e){DUKF.logHeap("#D"),log('We have received a new WebSocket connection.  The path is "'+e.path+'"'),e.on("message",function(t){log("We have received an incoming message: "+t),e.close()}),e.on("close",function(){log("Web Socket connection closed, ending handler!"),console.handler=null}),console.handler=function(t){log("Sending to WS"),e.send(t)}}),a.listen(t),log("Being a WebSocket server on port "+t)}var http=require("http.js"),URL=require("url.js"),ws=require("ws.js")
module.exports=startIde
